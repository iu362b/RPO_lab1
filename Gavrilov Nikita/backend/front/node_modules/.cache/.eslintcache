[{"C:\\Users\\ngavr\\IdeaProjects\\backend\\front\\src\\index.js":"1","C:\\Users\\ngavr\\IdeaProjects\\backend\\front\\src\\App.js":"2","C:\\Users\\ngavr\\IdeaProjects\\backend\\front\\src\\reportWebVitals.js":"3","C:\\Users\\ngavr\\IdeaProjects\\backend\\front\\src\\components\\NavigationBar.jsx":"4","C:\\Users\\ngavr\\IdeaProjects\\backend\\front\\src\\components\\Home.jsx":"5","C:\\Users\\ngavr\\IdeaProjects\\backend\\front\\src\\components\\Login.jsx":"6","C:\\Users\\ngavr\\IdeaProjects\\backend\\front\\src\\services\\BackendService.jsx":"7","C:\\Users\\ngavr\\IdeaProjects\\backend\\front\\src\\utils\\Utils.jsx":"8","C:\\Users\\ngavr\\IdeaProjects\\backend\\front\\src\\utils\\Rdx.jsx":"9","C:\\Users\\ngavr\\IdeaProjects\\backend\\front\\src\\components\\SideBar.jsx":"10","C:\\Users\\ngavr\\IdeaProjects\\backend\\front\\src\\components\\ArtistComponent.jsx":"11","C:\\Users\\ngavr\\IdeaProjects\\backend\\front\\src\\components\\ArtistListComponent.jsx":"12","C:\\Users\\ngavr\\IdeaProjects\\backend\\front\\src\\components\\Alert.jsx":"13","C:\\Users\\ngavr\\IdeaProjects\\backend\\front\\src\\components\\CountryComponent.jsx":"14","C:\\Users\\ngavr\\IdeaProjects\\backend\\front\\src\\components\\CountryListComponent.jsx":"15","C:\\Users\\ngavr\\IdeaProjects\\backend\\front\\src\\components\\MuseumComponent.jsx":"16","C:\\Users\\ngavr\\IdeaProjects\\backend\\front\\src\\components\\MuseumListComponent.jsx":"17","C:\\Users\\ngavr\\IdeaProjects\\backend\\front\\src\\components\\MyAccountComponent.jsx":"18","C:\\Users\\ngavr\\IdeaProjects\\backend\\front\\src\\components\\PaginationComponent.jsx":"19","C:\\Users\\ngavr\\IdeaProjects\\backend\\front\\src\\components\\PaintingComponent.jsx":"20","C:\\Users\\ngavr\\IdeaProjects\\backend\\front\\src\\components\\PaintingListComponent.jsx":"21","C:\\Users\\ngavr\\IdeaProjects\\backend\\front\\src\\components\\UserComponent.jsx":"22","C:\\Users\\ngavr\\IdeaProjects\\backend\\front\\src\\components\\UserListComponent.jsx":"23"},{"size":870,"mtime":1655167291055,"results":"24","hashOfConfig":"25"},{"size":4257,"mtime":1655167266492,"results":"26","hashOfConfig":"25"},{"size":362,"mtime":1655152290403,"results":"27","hashOfConfig":"25"},{"size":2936,"mtime":1655167413428,"results":"28","hashOfConfig":"25"},{"size":313,"mtime":1655152967526,"results":"29","hashOfConfig":"25"},{"size":6965,"mtime":1655167313190,"results":"30","hashOfConfig":"25"},{"size":5291,"mtime":1655167340261,"results":"31","hashOfConfig":"25"},{"size":565,"mtime":1655160617932,"results":"32","hashOfConfig":"25"},{"size":1722,"mtime":1655166164252,"results":"33","hashOfConfig":"25"},{"size":2957,"mtime":1655167432926,"results":"34","hashOfConfig":"25"},{"size":4706,"mtime":1655172851993,"results":"35","hashOfConfig":"25"},{"size":7074,"mtime":1655167596629,"results":"36","hashOfConfig":"25"},{"size":765,"mtime":1655167529313,"results":"37","hashOfConfig":"25"},{"size":2969,"mtime":1655167627099,"results":"38","hashOfConfig":"25"},{"size":6867,"mtime":1655167653766,"results":"39","hashOfConfig":"25"},{"size":3981,"mtime":1655170314036,"results":"40","hashOfConfig":"25"},{"size":6916,"mtime":1655167729040,"results":"41","hashOfConfig":"25"},{"size":4221,"mtime":1655167757180,"results":"42","hashOfConfig":"25"},{"size":4406,"mtime":1655167791273,"results":"43","hashOfConfig":"25"},{"size":5399,"mtime":1655174061707,"results":"44","hashOfConfig":"25"},{"size":7255,"mtime":1655172998467,"results":"45","hashOfConfig":"25"},{"size":3923,"mtime":1655167853674,"results":"46","hashOfConfig":"25"},{"size":7490,"mtime":1655167872295,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"52"},"1duac1c",{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"52"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"52"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"52"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"52"},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"52"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"52"},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"52"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"52"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"52"},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"52"},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"52"},"C:\\Users\\ngavr\\IdeaProjects\\backend\\front\\src\\index.js",["130"],[],"import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { store } from './utils/Rdx';\nimport { Provider } from 'react-redux';\nimport {render} from \"react-dom\";\n\nrender(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n\n// const root = ReactDOM.createRoot(document.getElementById('root'));\n// root.render(\n  // <React.StrictMode>\n    // <App />\n  // </React.StrictMode>\n// );\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",[],"C:\\Users\\ngavr\\IdeaProjects\\backend\\front\\src\\App.js",[],[],"C:\\Users\\ngavr\\IdeaProjects\\backend\\front\\src\\reportWebVitals.js",[],[],"C:\\Users\\ngavr\\IdeaProjects\\backend\\front\\src\\components\\NavigationBar.jsx",["131","132"],[],"import React from 'react';\r\nimport { Navbar, Nav } from 'react-bootstrap'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faHome, faUser, faBars } from '@fortawesome/free-solid-svg-icons'\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Link } from \"react-router-dom\";\r\nimport Utils from \"../utils/Utils\";\r\nimport BackendService from \"../services/BackendService\";\r\nimport {connect} from \"react-redux\";\r\nimport {userActions} from \"../utils/Rdx\";\r\n\r\nclass NavigationBarClass extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.goHome = this.goHome.bind(this);\r\n        this.logout = this.logout.bind(this);\r\n    }\r\n\r\n    goHome() {\r\n        this.props.navigate('Home');\r\n    }\r\n\r\n    logout() {\r\n        BackendService.logout()\r\n        .then(() => {})\r\n        .catch(()=> {})\r\n        .finally(()=> {\r\n            Utils.removeUser();\r\n            this.props.dispatch(userActions.logout())\r\n            this.props.navigate('Login');\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let uname = Utils.getUserName();\r\n        let currentDate = Date.now();\r\n        if (this.props.user && (currentDate - Date.parse(this.props.user.activity)) > 1000 * 60 * 10) {\r\n            this.logout();\r\n        }\r\n        return (\r\n            <Navbar bg=\"light\" expand=\"lg\">\r\n                <button type=\"button\"\r\n                    className=\"btn btn-outline-secondary me-2 ms-2\"\r\n                    onClick={this.props.toggleSideBar}>\r\n                    <FontAwesomeIcon icon={ faBars } />\r\n                </button>\r\n                <Navbar.Brand>myRPO</Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                    <Nav className=\"me-auto\">\r\n                        <Nav.Link as={Link} to=\"/home\">Home</Nav.Link>\r\n                        <Nav.Link onClick={this.goHome}>Another Home</Nav.Link>\r\n                        <Nav.Link onClick={() =>{ this.props.navigate(\"/home\") }}>Yet Another Home</Nav.Link>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n                <Navbar.Text>{this.props.user && this.props.user.login}</Navbar.Text>\r\n                { this.props.user &&\r\n                    <Nav.Link onClick={this.logout}><FontAwesomeIcon icon={faUser} fixedWidth />{' '}Выход</Nav.Link>\r\n                }\r\n                { !this.props.user &&\r\n                    <Nav.Link as={Link} to=\"/login\"><FontAwesomeIcon icon={faUser} fixedWidth />{' '}Вход</Nav.Link>\r\n                }\r\n            </Navbar>\r\n        );\r\n    }\r\n}\r\n\r\nconst NavigationBar = props => {\r\n    const navigate = useNavigate()\r\n    return <NavigationBarClass navigate={navigate} {...props} />\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n      const { user } = state.authentication;\r\n      return { user };\r\n}\r\n\r\nexport default connect(mapStateToProps)(NavigationBar);","C:\\Users\\ngavr\\IdeaProjects\\backend\\front\\src\\components\\Home.jsx",["133"],[],"import React from 'react';\r\n\r\nclass Home extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"mt-5 me-auto\">\r\n                <h2>RPO Art Frontend</h2>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","C:\\Users\\ngavr\\IdeaProjects\\backend\\front\\src\\components\\Login.jsx",["134"],[],"import React, {useState} from \"react\";\r\nimport BackendService from \"../services/BackendService\";\r\nimport Utils from \"../utils/Utils\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {store, userActions} from \"../utils/Rdx\";\r\n\r\nexport default connect()(function Login() {\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [loggingIn, setLoggingIn] = useState(false);\r\n    const [submitted, setSubmitted] = useState(false);\r\n    //const [error_message, setErrorMessage] = useState(null);\r\n    const nav = useNavigate();\r\n\r\n    function handleChangeLogin(e) {\r\n        setUsername(e.target.value);\r\n    }\r\n\r\n    function handleChangePassword(e) {\r\n        setPassword(e.target.value);\r\n    }\r\n\r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n        setSubmitted(true);\r\n        //setErrorMessage(null);\r\n        setLoggingIn(true);\r\n        BackendService.login(username, password)\r\n            .then ( resp => {\r\n                console.log(resp.data);\r\n                setLoggingIn(false);\r\n                store.dispatch(userActions.login(resp.data));\r\n                nav(\"/home\");\r\n            })\r\n            .catch( err => {\r\n//                if (err.response && err.response.status === 401)\r\n//                    setErrorMessage(\"Ошибка авторизации\");\r\n//                else\r\n//                    setErrorMessage(err.message);\r\n                setLoggingIn(false);\r\n            })\r\n    }\r\n\r\n    return (\r\n        <div className=\"col-md-6 me-0\">\r\n            {/*error_message &&\r\n                <div className=\"alert alert-danger mt-1 me-0 ms-0\">{error_message}</div>*/}\r\n            <h2>Вход</h2>\r\n            <form name=\"form\" onSubmit={handleSubmit}>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"username\">Логин</label>\r\n                    <input type=\"text\" className={'form-control' + (submitted && !username ? ' is-invalid' : '' )}\r\n                        name=\"username\" value={username}\r\n                        onChange={handleChangeLogin} />\r\n                    {submitted && !username && <div className=\"help-block text-danger\">Введите имя пользователя</div>}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"password\">Пароль</label>\r\n                    <input type=\"password\" className={'form-control' + (submitted && !password ? ' is-invalid' : '' )}\r\n                        name=\"password\" value={password}\r\n                        onChange={handleChangePassword} />\r\n                        {submitted && !password && <div className=\"help-block text-danger\">Введите пароль</div>}\r\n                </div>\r\n                <div className=\"form-group mt-2\">\r\n                    <button className=\"btn btn-primary\">\r\n                        {loggingIn && <span className=\"spinner-border spinner-border-sm\"\r\n                            role=\"status\"\r\n                            aria-hidden=\"true\"\r\n                            onSubmit={handleSubmit}>\r\n                        </span>}\r\n                        Вход\r\n                    </button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n})\r\n//\r\n//class Login extends React.Component {\r\n//      constructor(props) {\r\n//          super(props);\r\n//          this.state = {\r\n//              username: '',\r\n//              password: '',\r\n//              loggingIn: false,\r\n//              submitted: false,\r\n//              error_message: null,\r\n//          };\r\n//          this.handleChange = this.handleChange.bind(this)\r\n//          this.handleSubmit = this.handleSubmit.bind(this)\r\n//      }\r\n//\r\n//      handleChange(e) {\r\n//            const { name, value } = e.target;\r\n//            this.setState({ [name]: value });\r\n//      }\r\n//\r\n//      handleSubmit(e) {\r\n//            e.preventDefault();\r\n//            this.setState({ submitted: true, loggingIn: true, error_message: null });\r\n//            const { username, password } = this.state;\r\n//            BackendService.login(username, password)\r\n//                .then(resp => {\r\n//                    console.log(resp.data);\r\n//                    Utils.saveUser(resp.data);\r\n//                })\r\n//                .catch( err => {\r\n//                    if (err.response && err.response.status === 401)\r\n//                        this.setState( { error_message : \"Ошибка авторизации\", loggingIn: false } );\r\n//                    else\r\n//                        this.setState( { error_message : err.message, loggingIn: false  } );\r\n//                })\r\n//                .finally(()=> this.setState({ loggingIn : false }));\r\n//      }\r\n//\r\n//      render() {\r\n//            console.log(\"render\");\r\n//            let { submitted, username, password, loggingIn } = this.state;\r\n//            return (\r\n//                <div className=\"col-md-6 me-0\">\r\n//                    {this.state.error_message && <div className=\"alert alert-danger mt-1 me-0 ms-0\">\r\n//                        {this.state.error_message}\r\n//                    </div>}\r\n//                <h2>Вход</h2>\r\n//                <form name=\"form\" onSubmit={this.handleSubmit}>\r\n//                    <div className=\"form-group\">\r\n//                        <label htmlFor=\"username\">Логин</label>\r\n//                        <input type=\"text\" className={'form-control' + (submitted && !username ? ' is-invalid' : '' )}\r\n//                                name=\"username\" value={username}\r\n//                                onChange={this.handleChange} />\r\n//                        {submitted && !username && <div className=\"help-block text-danger\">Введите имя пользователя</div>}\r\n//                    </div>\r\n//                    <div className=\"form-group\">\r\n//                        <label htmlFor=\"password\">Пароль</label>\r\n//                        <input type=\"password\" className={'form-control' + (submitted && !password ? ' is-invalid' : '' )}\r\n//                                name=\"password\" value={password}\r\n//                                onChange={this.handleChange} />\r\n//                        {submitted && !password && <div className=\"help-block text-danger\">Введите пароль</div>}\r\n//                    </div>\r\n//                    <div className=\"form-group mt-2\">\r\n//                        <button className=\"btn btn-primary\">\r\n//                            {loggingIn && <span className=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"\r\n//                                onSubmit={this.handleSubmit}></span>}\r\n//                            Вход\r\n//                        </button>\r\n//                    </div>\r\n//                </form>\r\n//                </div>\r\n//            );\r\n//      }\r\n//}\r\n//\r\n//export default Login;","C:\\Users\\ngavr\\IdeaProjects\\backend\\front\\src\\services\\BackendService.jsx",[],[],"C:\\Users\\ngavr\\IdeaProjects\\backend\\front\\src\\utils\\Utils.jsx",[],[],"C:\\Users\\ngavr\\IdeaProjects\\backend\\front\\src\\utils\\Rdx.jsx",[],[],"C:\\Users\\ngavr\\IdeaProjects\\backend\\front\\src\\components\\SideBar.jsx",[],[],"C:\\Users\\ngavr\\IdeaProjects\\backend\\front\\src\\components\\ArtistComponent.jsx",["135","136"],[],"C:\\Users\\ngavr\\IdeaProjects\\backend\\front\\src\\components\\ArtistListComponent.jsx",["137","138"],[],"import React, {useState, useEffect} from 'react';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\nimport {faTrash, faEdit, faPlus} from '@fortawesome/free-solid-svg-icons'\r\nimport Alert from './Alert'\r\nimport BackendService from \"../services/BackendService\";\r\nimport {useNavigate} from 'react-router-dom';\r\nimport PaginationComponent from \"./PaginationComponent\";\r\n\r\nconst ArtistListComponent = props => {\r\n    const [message, setMessage] = useState();\r\n    const [artists, setArtists] = useState([]);\r\n    const [selectedArtists, setSelectedArtists] = useState([]);\r\n    const [show_alert, setShowAlert] = useState(false);\r\n    const [checkedItems, setCheckedItems] = useState([]);\r\n    const [hidden, setHidden] = useState(false);\r\n    const navigate = useNavigate();\r\n\r\n    // Добавляем из 12 лабы\r\n    const [page, setPage] = useState(0);\r\n    const [totalCount, setTotalCount] = useState(0);\r\n    const limit = 2;\r\n\r\n    const setChecked = v => {\r\n        setCheckedItems(Array(artists.length).fill(v));\r\n    }\r\n\r\n    // Функция загрузки страницы\r\n    const onPageChanged = cp => {\r\n        refreshArtists(cp - 1);\r\n    }\r\n\r\n    const handleCheckChange = e => {\r\n        const idx = e.target.name;\r\n        const isChecked = e.target.checked;\r\n\r\n        let checkedCopy = [...checkedItems];\r\n        checkedCopy[idx] = isChecked;\r\n        setCheckedItems(checkedCopy);\r\n    }\r\n\r\n    const handleGroupCheckChange = e => {\r\n        const isChecked = e.target.checked;\r\n        setChecked(isChecked);\r\n    }\r\n\r\n    const deleteArtistClicked = () => {\r\n        let x = [];\r\n        artists.map((t, idx) => {\r\n            if (checkedItems[idx]) {\r\n                x.push(t)\r\n            }\r\n            return 0\r\n        });\r\n\r\n        if (x.length > 0) {\r\n            var msg;\r\n            if (x.length > 1) {\r\n                msg = \"Пожалуйста подтвердите удаление \" + x.length + \" художников\";\r\n            } else {\r\n                msg = \"Пожалуйста подтвердите удаление художника \" + x[0].name;\r\n            }\r\n            setShowAlert(true);\r\n            setSelectedArtists(x);\r\n            setMessage(msg);\r\n        }\r\n    }\r\n\r\n    const refreshArtists = cp => {\r\n        BackendService.retrieveAllArtists(cp, limit).then(\r\n            resp => {\r\n                setArtists(resp.data.content);\r\n                setHidden(false);\r\n                setTotalCount(resp.data.totalElements);\r\n                setPage(cp);\r\n            }\r\n        ).catch(() => {\r\n            setHidden(true);\r\n            setTotalCount(0);\r\n        }).finally(() => setChecked(false))\r\n\r\n        console.log(artists)\r\n    }\r\n\r\n    useEffect(() => {\r\n        refreshArtists();\r\n    }, [])\r\n\r\n    const updateArtistClicked = id => {\r\n        navigate(`/artists/${id}`)\r\n    }\r\n\r\n    const onDelete = () => {\r\n        BackendService.deleteArtists(selectedArtists)\r\n            .then(() => {\r\n                refreshArtists()\r\n            })\r\n            .catch(() => {\r\n            })\r\n    }\r\n\r\n    const closeAlert = () => {\r\n        setShowAlert(false)\r\n    }\r\n\r\n    const addArtist = () => {\r\n        navigate(`/artists/-1`)\r\n    }\r\n\r\n    if (hidden) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <div className=\"m-4\">\r\n            <div className=\"row my-2\">\r\n                <h3>Художники</h3>\r\n                <div className=\"btn-toolbar\">\r\n                    <div className=\"btn-group ms-auto\">\r\n                        <button className=\"btn btn-outline-secondary\"\r\n                                onClick={addArtist}>\r\n                            <FontAwesomeIcon icon={faPlus}/>{' '}Добавить\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"btn-group ms-2\">\r\n                        <button className=\"btn btn-outline-secondary\"\r\n                                onClick={deleteArtistClicked}>\r\n                            <FontAwesomeIcon icon={faTrash}/>{' '}Удалить\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"row my-2 me-0\">\r\n                <PaginationComponent\r\n                    totalRecords={totalCount}\r\n                    pageLimit={limit}\r\n                    pageNeighbours={1}\r\n                    onPageChanged={onPageChanged}/>\r\n                <table className=\"table table-sm\">\r\n                    <thead className=\"thead-light\">\r\n                    <tr>\r\n                        <th>Название</th>\r\n                        <th>Век</th>\r\n                        <th>Страна</th>\r\n                        <th>\r\n                            <div className=\"btn-toolbar pb-1\">\r\n                                <div className=\"btn-group ms-auto\">\r\n                                    <input type=\"checkbox\" onChange={handleGroupCheckChange}/>\r\n                                </div>\r\n                            </div>\r\n                        </th>\r\n                    </tr>\r\n                    </thead>\r\n\r\n                    <tbody> {\r\n                        artists && artists.map((artist, index) =>\r\n                            <tr key={artist.id}>\r\n                                <td>{artist.name}</td>\r\n                                <td>{artist.century}</td>\r\n                                <td>{artist.country.name}</td>\r\n                                <td>\r\n                                    <div className=\"btn-toolbar\">\r\n                                        <div className=\"btn-group ms-auto\">\r\n                                            <button className=\"btn btn-outline-secondary btn-sm btn-toolbar\"\r\n                                                    onClick={() =>\r\n                                                        updateArtistClicked(artist.id)}>\r\n                                                <FontAwesomeIcon icon={faEdit} fixedWidth/>\r\n                                            </button>\r\n                                        </div>\r\n\r\n                                        <div className=\"btn-group ms-2 mt-1\">\r\n                                            <input type=\"checkbox\" name={index}\r\n                                                   checked={checkedItems.length > index ? checkedItems[index] : false}\r\n                                                   onChange={handleCheckChange}/>\r\n                                        </div>\r\n                                    </div>\r\n                                </td>\r\n                            </tr>\r\n                        )\r\n                    }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n\r\n            <Alert title=\"Удаление\"\r\n                   message={message}\r\n                   ok={onDelete}\r\n                   close={closeAlert}\r\n                   modal={show_alert}\r\n                   cancelButton={true}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ArtistListComponent;","C:\\Users\\ngavr\\IdeaProjects\\backend\\front\\src\\components\\Alert.jsx",[],[],"C:\\Users\\ngavr\\IdeaProjects\\backend\\front\\src\\components\\CountryComponent.jsx",["139","140"],[],"import React, {useEffect, useState} from 'react';\r\nimport BackendService from '../services/BackendService';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {alertActions} from \"../utils/Rdx\";\r\nimport {connect} from \"react-redux\";\r\nimport {Form} from \"react-bootstrap\";\r\nimport {useNavigate, useParams} from \"react-router-dom\";\r\nimport {faChevronLeft, faSave} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst CountryComponent = props => {\r\n    const params = useParams();\r\n    const [id, setId] = useState(params.id);\r\n    const [name, setName] = useState(\"\");\r\n    const [hidden, setHidden] = useState(false);\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        if (parseInt(id) !== -1) {\r\n            BackendService.retrieveCountry(id)\r\n                .then((resp) => {\r\n                    setName(resp.data.name)\r\n                })\r\n                .catch(() => setHidden(true))\r\n        }\r\n    }, []);\r\n\r\n    const onSubmit = (event) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        let err = null;\r\n        if (!name) err = \"Название страны должно быть указано\";\r\n        if (err) props.dispatch(alertActions.error(err));\r\n        let country = {id, name};\r\n\r\n        if (parseInt(country.id) === -1) {\r\n            BackendService.createCountry(country)\r\n                .then(() => navigate(`/countries`))\r\n                .catch(() => {\r\n                })\r\n        } else {\r\n            BackendService.updateCountry(country)\r\n                .then(() => navigate(`/countries`))\r\n                .catch(() => {\r\n                })\r\n        }\r\n    }\r\n\r\n    if (hidden)\r\n        return null;\r\n\r\n    return (\r\n        <div className=\"m-4\">\r\n            <div className=\"row my-2\">\r\n                <div className=\"col-auto me-auto\"><h3>Страна</h3></div>\r\n                <div className=\"col-auto\"><button className=\"btn btn-outline-secondary\"\r\n                        onClick={() => navigate(`/countries`)}\r\n                ><FontAwesomeIcon icon={faChevronLeft}/>{' '}Назад</button></div>\r\n            </div>\r\n            <Form onSubmit={onSubmit}>\r\n                <Form.Group>\r\n                    <Form.Label>Название</Form.Label>\r\n                    <Form.Control\r\n                        type=\"text\"\r\n                        placeholder=\"Введите название страны\"\r\n                        onChange={(e) => {setName(e.target.value)}}\r\n                        value={name}\r\n                        name=\"name\"\r\n                        autoComplete=\"off\"\r\n                    />\r\n                </Form.Group>\r\n                <button className=\"btn btn-outline-secondary mt-2\" type=\"submit\">\r\n                    <FontAwesomeIcon icon={faSave}/>{' '}\r\n                    Сохранить\r\n                </button>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect()(CountryComponent);","C:\\Users\\ngavr\\IdeaProjects\\backend\\front\\src\\components\\CountryListComponent.jsx",["141","142"],[],"import React, { useState, useEffect } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTrash, faEdit, faPlus } from '@fortawesome/free-solid-svg-icons'\r\nimport Alert from './Alert'\r\nimport BackendService from \"../services/BackendService\";\r\nimport { useNavigate } from 'react-router-dom';\r\nimport PaginationComponent from \"./PaginationComponent\";\r\n\r\nconst CountryListComponent = props => {\r\n    const [message, setMessage] = useState();\r\n    const [countries, setCountries] = useState([]);\r\n    const [selectedCountries, setSelectedCountries] = useState([]);\r\n    const [show_alert, setShowAlert] = useState(false);\r\n    const [checkedItems, setCheckedItems] = useState([]);\r\n    const [hidden, setHidden] = useState(false);\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [totalCount, setTotalCount] = useState(0);\r\n    const limit = 2;\r\n\r\n    const onPageChanged = cp => {\r\n        refreshCountries(cp - 1)\r\n    }\r\n\r\n    const setChecked = v =>  {\r\n        setCheckedItems(Array(countries.length).fill(v));\r\n    }\r\n\r\n    const handleCheckChange = e => {\r\n        const idx = e.target.name;\r\n        const isChecked = e.target.checked;\r\n        let checkedCopy = [...checkedItems];\r\n        checkedCopy[idx] = isChecked;\r\n        setCheckedItems(checkedCopy);\r\n    }\r\n\r\n    const handleGroupCheckChange = e => {\r\n        const isChecked = e.target.checked;\r\n        setChecked(isChecked);\r\n    }\r\n\r\n    const deleteCountriesClicked = () => {\r\n        let x = [];\r\n        countries.map ((t, idx) => {\r\n            if (checkedItems[idx]) {\r\n                x.push(t) }\r\n            return 0 }\r\n        );\r\n        if (x.length > 0) {\r\n            var msg;\r\n            if (x.length > 1) {\r\n                msg = \"Пожалуйста подтвердите удаление \" + x.length + \" стран\";\r\n            }\r\n            else {\r\n                msg = \"Пожалуйста подтвердите удаление страны \" + x[0].name;\r\n            }\r\n            setShowAlert(true);\r\n            setSelectedCountries(x);\r\n            setMessage(msg);\r\n        }\r\n    }\r\n\r\n    const refreshCountries = cp => {\r\n        BackendService.retrieveAllCountries(cp, limit)\r\n            .then(\r\n                resp => {\r\n                    setCountries(resp.data.content);\r\n                    setHidden(false);\r\n                    setTotalCount(resp.data.totalElements);\r\n                    setPage(cp);\r\n                }\r\n            )\r\n            .catch(()=> {\r\n               setHidden(true);\r\n               setTotalCount(0);\r\n            })\r\n            .finally(()=> setChecked(false))\r\n    }\r\n\r\n    useEffect(() => {\r\n        refreshCountries();\r\n    }, [])\r\n\r\n    const updateCountryClicked = id => {\r\n        navigate(`/countries/${id}`)\r\n    }\r\n\r\n    const onDelete = () =>  {\r\n        BackendService.deleteCountries(selectedCountries)\r\n            .then( () => refreshCountries())\r\n            .catch(()=>{})\r\n    }\r\n\r\n    const closeAlert = () => {\r\n        setShowAlert(false)\r\n    }\r\n\r\n    const addCountryClicked = () => {\r\n        navigate(`/countries/-1`)\r\n    }\r\n\r\n    if (hidden)\r\n        return null;\r\n\r\n    return (\r\n        <div className=\"m-4\">\r\n            <div className=\"row my-2\">\r\n                <h3>Страны</h3>\r\n                <div className=\"btn-toolbar\">\r\n                    <div className=\"btn-group ms-auto\">\r\n                        <button className=\"btn btn-outline-secondary\" onClick={addCountryClicked}> <FontAwesomeIcon icon={faPlus} />\r\n                            {' '}Добавить\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"btn-group ms-2\">\r\n                        <button className=\"btn btn-outline-secondary\" onClick={deleteCountriesClicked}> <FontAwesomeIcon icon={faTrash} />\r\n                            {' '}Удалить\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"row my-2 me-0\">\r\n                <PaginationComponent\r\n                    totalRecords={totalCount}\r\n                    pageLimit={limit}\r\n                    pageNeighbours={1}\r\n                    onPageChanged={onPageChanged} />\r\n                <table className=\"table table-sm\">\r\n                    <thead className=\"thead-light\">\r\n                        <tr>\r\n                            <th>Название</th>\r\n                            <th>\r\n                                <div className=\"btn-toolbar pb-1\">\r\n                                    <div className=\"btn-group  ms-auto\">\r\n                                        <input type=\"checkbox\" onChange={handleGroupCheckChange} />\r\n                                    </div>\r\n                                </div>\r\n                            </th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            countries && countries.map((country, index) =>\r\n                                <tr key={country.id}>\r\n                                    <td>{country.name}</td>\r\n                                    <td>\r\n                                        <div className=\"btn-toolbar\">\r\n                                            <div className=\"btn-group  ms-auto\">\r\n                                                <button className=\"btn btn-outline-secondary btn-sm btn-toolbar\"\r\n                                                    onClick={() =>\r\n                                                        updateCountryClicked(country.id)}>\r\n                                                    <FontAwesomeIcon icon={faEdit} fixedWidth />\r\n                                                </button>\r\n                                            </div>\r\n                                            <div className=\"btn-group  ms-2  mt-1\">\r\n                                                <input type=\"checkbox\" name={index}\r\n                                                    checked={checkedItems.length> index ?  checkedItems[index] : false}\r\n                                                    onChange={handleCheckChange}/>\r\n                                            </div>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                            )\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n            <Alert title=\"Удаление\"\r\n                message={message}\r\n                ok={onDelete}\r\n                close={closeAlert}\r\n                modal={show_alert}\r\n                cancelButton={true} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CountryListComponent;","C:\\Users\\ngavr\\IdeaProjects\\backend\\front\\src\\components\\MuseumComponent.jsx",["143","144"],[],"C:\\Users\\ngavr\\IdeaProjects\\backend\\front\\src\\components\\MuseumListComponent.jsx",["145","146"],[],"import React, {useState, useEffect} from 'react';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\nimport {faTrash, faEdit, faPlus} from '@fortawesome/free-solid-svg-icons'\r\nimport Alert from './Alert'\r\nimport BackendService from \"../services/BackendService\";\r\nimport {useNavigate} from 'react-router-dom';\r\nimport PaginationComponent from \"./PaginationComponent\";\r\n\r\nconst MuseumListComponent = props => {\r\n    const [message, setMessage] = useState();\r\n    const [museums, setMuseums] = useState([]);\r\n    const [selectedMuseums, setSelectedMuseums] = useState([]);\r\n    const [show_alert, setShowAlert] = useState(false);\r\n    const [checkedItems, setCheckedItems] = useState([]);\r\n    const [hidden, setHidden] = useState(false);\r\n    const navigate = useNavigate();\r\n\r\n    // Добавляем из 12 лабы\r\n    const [page, setPage] = useState(0);\r\n    const [totalCount, setTotalCount] = useState(0);\r\n    const limit = 2;\r\n\r\n    const setChecked = v => {\r\n        setCheckedItems(Array(museums.length).fill(v));\r\n    }\r\n\r\n    // Функция загрузки страницы\r\n    const onPageChanged = cp => {\r\n        refreshMuseums(cp - 1);\r\n    }\r\n\r\n    const handleCheckChange = e => {\r\n        const idx = e.target.name;\r\n        const isChecked = e.target.checked;\r\n\r\n        let checkedCopy = [...checkedItems];\r\n        checkedCopy[idx] = isChecked;\r\n        setCheckedItems(checkedCopy);\r\n    }\r\n\r\n    const handleGroupCheckChange = e => {\r\n        const isChecked = e.target.checked;\r\n        setChecked(isChecked);\r\n    }\r\n\r\n    const deleteMuseumsClicked = () => {\r\n        let x = [];\r\n        museums.map((t, idx) => {\r\n            if (checkedItems[idx]) {\r\n                x.push(t)\r\n            }\r\n            return 0\r\n        });\r\n        if (x.length > 0) {\r\n            var msg;\r\n            if (x.length > 1) {\r\n                msg = \"Пожалуйста подтвердите удаление \" + x.length + \" музеев\";\r\n            } else {\r\n                msg = \"Пожалуйста подтвердите удаление музея \" + x[0].name;\r\n            }\r\n\r\n            setShowAlert(true);\r\n            setSelectedMuseums(x);\r\n            setMessage(msg);\r\n        }\r\n    }\r\n\r\n    const refreshMuseums = cp => {\r\n        BackendService.retrieveAllMuseums(cp, limit).then(\r\n            resp => {\r\n                setMuseums(resp.data.content);\r\n                setHidden(false);\r\n                setTotalCount(resp.data.totalElements);\r\n                setPage(cp);\r\n            }\r\n        ).catch(() => {\r\n            setHidden(true);\r\n            setTotalCount(0);\r\n        }).finally(() => setChecked(false))\r\n    }\r\n\r\n    useEffect(() => {\r\n        refreshMuseums();\r\n    }, [])\r\n\r\n    const updateMuseumsClicked = id => {\r\n        navigate(`/museums/${id}`)\r\n    }\r\n\r\n    const onDelete = () => {\r\n        BackendService.deleteMuseums(selectedMuseums)\r\n            .then(() => refreshMuseums())\r\n            .catch(() => {\r\n            })\r\n    }\r\n\r\n    const closeAlert = () => {\r\n        setShowAlert(false)\r\n    }\r\n\r\n    const addMuseumClicked = () => {\r\n        navigate(`/museums/-1`)\r\n    }\r\n\r\n    if (hidden) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <div className=\"m-4\">\r\n            <div className=\"row my-2\">\r\n                <h3>Музеи</h3>\r\n                <div className=\"btn-toolbar\">\r\n                    <div className=\"btn-group ms-auto\">\r\n                        <button className=\"btn btn-outline-secondary\"\r\n                                onClick={addMuseumClicked}>\r\n                            <FontAwesomeIcon icon={faPlus}/>{' '}Добавить\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"btn-group ms-2\">\r\n                        <button className=\"btn btn-outline-secondary\"\r\n                                onClick={deleteMuseumsClicked}>\r\n                            <FontAwesomeIcon icon={faTrash}/>{' '}Удалить\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"row my-2 me-0\">\r\n                <PaginationComponent\r\n                    totalRecords={totalCount}\r\n                    pageLimit={limit}\r\n                    pageNeighbours={1}\r\n                    onPageChanged={onPageChanged}/>\r\n                <table className=\"table table-sm\">\r\n                    <thead className=\"thead-light\">\r\n                    <tr>\r\n                        <th>Название</th>\r\n                        <th>Местоположение</th>\r\n                        <th>\r\n                            <div className=\"btn-toolbar pb-1\">\r\n                                <div className=\"btn-group ms-auto\">\r\n                                    <input type=\"checkbox\" onChange={handleGroupCheckChange}/>\r\n                                </div>\r\n                            </div>\r\n                        </th>\r\n                    </tr>\r\n                    </thead>\r\n\r\n                    <tbody> {\r\n                        museums && museums.map((museum, index) =>\r\n                            <tr key={museum.id}>\r\n                                <td>{museum.name}</td>\r\n                                <td>{museum.location}</td>\r\n\r\n                                <td>\r\n                                    <div className=\"btn-toolbar\">\r\n                                        <div className=\"btn-group ms-auto\">\r\n                                            <button className=\"btn btn-outline-secondary btn-sm btn-toolbar\"\r\n                                                    onClick={() =>\r\n                                                        updateMuseumsClicked(museum.id)}>\r\n                                                <FontAwesomeIcon icon={faEdit} fixedWidth/>\r\n                                            </button>\r\n                                        </div>\r\n\r\n                                        <div className=\"btn-group ms-2 mt-1\">\r\n                                            <input type=\"checkbox\" name={index}\r\n                                                   checked={checkedItems.length > index ? checkedItems[index] : false}\r\n                                                   onChange={handleCheckChange}/>\r\n                                        </div>\r\n                                    </div>\r\n                                </td>\r\n                            </tr>\r\n                        )\r\n                    }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n\r\n            <Alert title=\"Удаление\"\r\n                   message={message}\r\n                   ok={onDelete}\r\n                   close={closeAlert}\r\n                   modal={show_alert}\r\n                   cancelButton={true}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MuseumListComponent;","C:\\Users\\ngavr\\IdeaProjects\\backend\\front\\src\\components\\MyAccountComponent.jsx",["147","148","149"],[],"import React, {useEffect, useState} from 'react';\r\nimport BackendService from '../services/BackendService';\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faChevronLeft} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {connect, useDispatch} from \"react-redux\";\r\nimport {alertActions} from \"../utils/Rdx\";\r\nimport Utils from \"../utils/Utils\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport {useNavigate} from \"react-router-dom\";\r\n\r\nconst MyAccountComponent = props => {\r\n    const navigate = useNavigate();\r\n    const dispatch = useDispatch()\r\n    const {register, handleSubmit, setValue : mySetValue } = useForm();\r\n    const [show_pwd, setShowPwd] = useState(false);\r\n    const uid = Utils.getUser().id;\r\n    const onSubmit = data => {\r\n        console.log(data);\r\n        let user = {\r\n            id: uid,\r\n            login: data.login,\r\n            email: data.email,\r\n            password: data.pwd,\r\n            np: data.pwd2\r\n        }\r\n\r\n        if (validate(data)) {\r\n            BackendService.updateUser(user)\r\n            .then(() => {\r\n                navigate(\"users/\");\r\n            })\r\n            .catch(() => {\r\n            })\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        BackendService.retrieveUser(uid)\r\n        .then(response => {\r\n            mySetValue(\"login\", response.data.login);\r\n            mySetValue(\"email\", response.data.email);\r\n        })\r\n        .catch(() => {\r\n        })\r\n    }, []);\r\n\r\n    const onSetPasswordClick = () => {\r\n        setShowPwd(true );\r\n    }\r\n\r\n    const validate = values => {\r\n        let e = null\r\n        if (values.pwd) {\r\n            if (values.pwd2.length < 8)\r\n                e = 'Длина пароля должна быть не меньше 8 символов'\r\n            else if (!values.pwd2)\r\n                e = 'Пожалуйста повторите ввод пароля'\r\n            else if (values.pwd !== values.pwd2)\r\n                e = 'Пароли не совпадают'\r\n        }\r\n        if (e != null) {\r\n            dispatch(alertActions.error(e))\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    return (\r\n        <div className=\"m-4\">\r\n            <div className=\"container\">\r\n                <div className=\"row my-2\">\r\n                    <h3>Мой аккаунт</h3>\r\n                </div>\r\n                <form onSubmit={handleSubmit(onSubmit)}>\r\n                    <fieldset className=\"form-group mt-2\">\r\n                        <label>Логин</label>\r\n                        <input {...register(\"login\")} className=\"form-control\" type=\"text\" disabled/>\r\n                    </fieldset>\r\n                    <fieldset className=\"form-group mt-2\" >\r\n                        <label>EMail</label>\r\n                        <input {...register(\"email\")} className=\"form-control\" type=\"text\"/>\r\n                    </fieldset>\r\n                    {\r\n                        show_pwd &&\r\n                            <fieldset className=\"form-group mt-2\">\r\n                                <label>Введите пароль</label>\r\n                                <input className=\"form-control\" type=\"password\" {...register(\"pwd\")}/>\r\n                            </fieldset>\r\n                    }\r\n                    {\r\n                        show_pwd &&\r\n                        <fieldset className=\"form-group-mt-2\">\r\n                            <label>Повторите пароль</label>\r\n                            <input className=\"form-control\" type=\"password\" {...register(\"pwd2\", {minLength: 8})}/>\r\n                        </fieldset>\r\n                    }\r\n                    {\r\n                        !show_pwd && <div>\r\n                            <button className=\"btn btn-outline-secondary mt-2\"\r\n                                onClick={onSetPasswordClick}>Изменить пароль\r\n                            </button>\r\n                          </div>\r\n                    }\r\n\r\n                   <input type=\"submit\" className=\"btn btn-outline-secondary mt-2\" value={\"Сохранить\"}/>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect()(MyAccountComponent);","C:\\Users\\ngavr\\IdeaProjects\\backend\\front\\src\\components\\PaginationComponent.jsx",["150"],[],"import React, {Fragment, useEffect, useState} from 'react';\r\n\r\nconst LEFT_PAGE = 'LEFT';\r\nconst RIGHT_PAGE = 'RIGHT';\r\n\r\nconst PaginationComponent = props => {\r\n    const totalRecords = props.totalRecords;\r\n    const pageNeighbours = props.pageNeighbours;\r\n    const [currentPage, setCurrentPage] = useState(props.currentPage);\r\n    const totalPages = Math.ceil(props.totalRecords / props.pageLimit)\r\n\r\n    const range = (from, to, step = 1) => {\r\n        let i = from;\r\n        const range = [];\r\n\r\n        while (i <= to) {\r\n            range.push(i);\r\n            i += step;\r\n        }\r\n\r\n        return range;\r\n    }\r\n\r\n    const fetchPageNumbers = () => {\r\n        const totalNumbers = (pageNeighbours * 2) + 3;\r\n        const totalBlocks = totalNumbers + 2;\r\n\r\n        if (totalPages > totalBlocks) {\r\n            const startPage = Math.max(2, currentPage - pageNeighbours);\r\n            const endPage = Math.min(totalPages - 1, currentPage + pageNeighbours);\r\n\r\n            let pages = range(startPage, endPage);\r\n            const hasLeftSpill = startPage > 2;\r\n            const hasRightSpill = (totalPages - endPage) > 1;\r\n            const spillOffset = totalNumbers - (pages.length + 1);\r\n\r\n            switch (true) {\r\n                case (hasLeftSpill && !hasRightSpill): {\r\n                    let extraPages = range(startPage - spillOffset, startPage - 1);\r\n                    pages = [LEFT_PAGE, ...extraPages, ...pages];\r\n                    break;\r\n                }\r\n                case (!hasLeftSpill && hasRightSpill): {\r\n                    let extraPages = range(endPage + 1, endPage + spillOffset);\r\n                    pages = [...pages, ...extraPages, RIGHT_PAGE];\r\n                    break;\r\n                }\r\n                case (hasLeftSpill && hasRightSpill):\r\n                default: {\r\n                    pages = [LEFT_PAGE, ...pages, RIGHT_PAGE];\r\n                    break;\r\n                }\r\n            }\r\n            return [1, ...pages, totalPages]\r\n        }\r\n\r\n        return range(1, totalPages);\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        gotoPage(1);\r\n    }, []);\r\n\r\n    const gotoPage = page => {\r\n        const {onPageChanged = f => f} = props;\r\n        onPageChanged(page);\r\n        setCurrentPage(page);\r\n    }\r\n\r\n    const handleClick = page => evt => {\r\n        evt.preventDefault();\r\n        gotoPage(page);\r\n    }\r\n\r\n    const handleMoveLeft = e => {\r\n        e.preventDefault();\r\n        gotoPage(currentPage - (pageNeighbours * 2) - 1);\r\n    }\r\n\r\n    const handleMoveRight = e => {\r\n        e.preventDefault();\r\n        gotoPage(currentPage + (pageNeighbours * 2) + 1);\r\n    }\r\n\r\n    if (!totalRecords || totalPages === 1) {\r\n        return null;\r\n    }\r\n\r\n    const pages = fetchPageNumbers(totalPages);\r\n\r\n    return (\r\n        <Fragment>\r\n            <nav aria-label=\"Pagination\">\r\n                <ul className=\"pagination\">\r\n                    {pages.map((page, index) => {\r\n                        if (page === LEFT_PAGE) return (\r\n                            <li key={index} className=\"page-item\">\r\n                                <button className=\"page-link\" aria-label=\"Previous\" onClick={handleMoveLeft}>\r\n                                    <span aria-hidden=\"true\">«</span>\r\n                                    <span className=\"sr-only\">Предыдущая</span>\r\n                                </button>\r\n                            </li>\r\n                        );\r\n\r\n                        if (page === RIGHT_PAGE) return (\r\n                            <li key={index} className=\"page-item\">\r\n                                <button className=\"page-link\" aria-label=\"Next\" onClick={handleMoveRight}>\r\n                                    <span aria-hidden=\"true\">»</span>\r\n                                    <span className=\"sr-only\">Следующая</span>\r\n                                </button>\r\n                            </li>\r\n                        );\r\n\r\n                        return (\r\n                            <li key={index} className={`page-item${currentPage === page ? ' active' : ''}`}>\r\n                                <button className=\"page-link\" onClick={handleClick(page)}>{page}</button>\r\n                            </li>\r\n                        );\r\n                    })}\r\n                </ul>\r\n            </nav>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default PaginationComponent;","C:\\Users\\ngavr\\IdeaProjects\\backend\\front\\src\\components\\PaintingComponent.jsx",["151","152"],[],"C:\\Users\\ngavr\\IdeaProjects\\backend\\front\\src\\components\\PaintingListComponent.jsx",["153","154"],[],"C:\\Users\\ngavr\\IdeaProjects\\backend\\front\\src\\components\\UserComponent.jsx",["155","156"],[],"import React, {useEffect, useState} from 'react';\r\nimport BackendService from '../services/BackendService';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\n//import {faChevronLeft, faSave} from '@fortawesome/fontawesome-free-solid';\r\nimport {alertActions} from \"../utils/Rdx\";\r\nimport {connect} from \"react-redux\";\r\nimport {Form} from \"react-bootstrap\";\r\nimport {useNavigate, useParams} from \"react-router-dom\";\r\nimport {faChevronLeft, faSave} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst UserComponent = props => {\r\n    const params = useParams();\r\n\r\n    const [id, setId] = useState(params.id);\r\n    const [login, setLogin] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n\r\n    const [hidden, setHidden] = useState(false);\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        if (parseInt(id) !== -1) {\r\n            BackendService.retrieveUser(id)\r\n                .then((resp) => {\r\n                    setLogin(resp.data.login)\r\n                    setEmail(resp.data.email)\r\n                })\r\n                .catch(() => setHidden(true))\r\n        }\r\n    }, []); // [] нужны для вызова useEffect только один раз при инициализации компонента\r\n    // это нужно для того, чтобы в состояние name каждый раз не записывалось значение из БД\r\n\r\n    const onSubmit = (event) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        let err = null;\r\n        if (!login) err = \"Название страны должно быть указано\";\r\n        if (!email) err = \"Название email должно быть указано\";\r\n\r\n        if (err) props.dispatch(alertActions.error(err));\r\n        let user = {id, login, email};\r\n\r\n        if (parseInt(user.id) === -1) {\r\n            BackendService.createUser(user)\r\n                .then(() => navigate(`/users`))\r\n                .catch(() => {\r\n                })\r\n        } else {\r\n            BackendService.updateUser(user)\r\n                .then(() => navigate(`/users`))\r\n                .catch(() => {\r\n                })\r\n        }\r\n    }\r\n\r\n    if (hidden)\r\n        return null;\r\n    return (\r\n        <div className=\"m-4\">\r\n            <div className=\" row my-2\">\r\n                <div className=\"col-auto me-auto\"><h3>Пользователи</h3></div>\r\n                <div className=\"col-auto\"><button className=\"btn btn-outline-secondary\"\r\n                        onClick={() => navigate(`/users`)}\r\n                ><FontAwesomeIcon icon={faChevronLeft}/>{' '}Назад</button></div>\r\n            </div>\r\n            <Form onSubmit={onSubmit}>\r\n                <Form.Group>\r\n                    <Form.Label>Логин</Form.Label>\r\n                    <Form.Control\r\n                        type=\"text\"\r\n                        placeholder=\"Введите логин\"\r\n                        onChange={(e) => {setLogin(e.target.value)}}\r\n                        value={login}\r\n                        name=\"login\"\r\n                        autoComplete=\"off\"\r\n                    />\r\n\r\n                    <Form.Label>Электро почта</Form.Label>\r\n                    <Form.Control\r\n                        type=\"text\"\r\n                        placeholder=\"Введите электро почту\"\r\n                        onChange={(e) => {setEmail(e.target.value)}}\r\n                        value={email}\r\n                        name=\"email\"\r\n                        autoComplete=\"off\"\r\n                    />\r\n                </Form.Group>\r\n                <button className=\"btn btn-outline-secondary\" type=\"submit\">\r\n                    <FontAwesomeIcon icon={faSave}/>{' '}\r\n                    Сохранить\r\n                </button>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect()(UserComponent);","C:\\Users\\ngavr\\IdeaProjects\\backend\\front\\src\\components\\UserListComponent.jsx",["157","158","159","160","161","162","163"],[],"import React, {useState, useEffect} from 'react';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\nimport {faTrash, faEdit, faPlus} from '@fortawesome/free-solid-svg-icons'\r\nimport Alert from './Alert'\r\nimport BackendService from \"../services/BackendService\";\r\nimport {useNavigate} from 'react-router-dom';\r\nimport PaginationComponent from \"./PaginationComponent\";\r\nimport {alertActions} from \"../utils/Rdx\";\r\n\r\nconst UserListComponent = props => {\r\n    const [message, setMessage] = useState();\r\n    const [users, setUsers] = useState([]);\r\n    const [selectedUsers, setSelectedUsers] = useState([]);\r\n    const [show_alert, setShowAlert] = useState(false);\r\n    const [checkedItems, setCheckedItems] = useState([]);\r\n    const [hidden, setHidden] = useState(false);\r\n    const navigate = useNavigate();\r\n\r\n    // Добавляем из 12 лабы\r\n    const [page, setPage] = useState(0);\r\n    const [totalCount, setTotalCount] = useState(0);\r\n    const limit = 2;\r\n\r\n    const setChecked = v => {\r\n        setCheckedItems(Array(users.length).fill(v));\r\n    }\r\n\r\n    // Функция загрузки страницы\r\n    const onPageChanged = cp => {\r\n        refreshUsers(cp - 1);\r\n    }\r\n\r\n    const handleCheckChange = e => {\r\n        const idx = e.target.name;\r\n        const isChecked = e.target.checked;\r\n\r\n        let checkedCopy = [...checkedItems];\r\n        checkedCopy[idx] = isChecked;\r\n        setCheckedItems(checkedCopy);\r\n    }\r\n\r\n    const handleGroupCheckChange = e => {\r\n        const isChecked = e.target.checked;\r\n        setChecked(isChecked);\r\n    }\r\n\r\n    const deleteUsersClicked = () => {\r\n        let x = [];\r\n        users.map((t, idx) => {\r\n            if (checkedItems[idx]) {\r\n                x.push(t)\r\n            }\r\n            return 0\r\n        });\r\n        if (x.length > 0) {\r\n            var msg;\r\n            if (x.length > 1) {\r\n                msg = \"Пожалуйста подтвердите удаление \" + x.length + \" пользователей\";\r\n            } else {\r\n                msg = \"Пожалуйста подтвердите удаление пользователя \" + x[0].login;\r\n            }\r\n\r\n            setShowAlert(true);\r\n            setSelectedUsers(x);\r\n            setMessage(msg);\r\n        }\r\n    }\r\n\r\n    const refreshUsers = cp => {\r\n        BackendService.retrieveAllUsers(cp, limit).then(\r\n            resp => {\r\n                setUsers(resp.data.content);\r\n                setHidden(false);\r\n                setTotalCount(resp.data.totalElements);\r\n                setPage(cp);\r\n            }\r\n        ).catch(() => {\r\n            setHidden(true);\r\n            setTotalCount(0);\r\n        }).finally(() => setChecked(false))\r\n    }\r\n\r\n    useEffect(() => {\r\n        refreshUsers();\r\n    }, [])\r\n\r\n    // Было решено убрать кнопку редактирования чужих пользовательских данных\r\n\r\n    // const updateUserClicked = id => {\r\n    //     navigate(`/users/${id}`)\r\n    // }\r\n\r\n    const onDelete = () => {\r\n        let canRemove = true;\r\n        let user = null;\r\n        for (let i = 0; i < selectedUsers.length; ++i) {\r\n            if (selectedUsers[i].museums.length > 0) {\r\n                canRemove = false;\r\n                user = selectedUsers[i];\r\n            }\r\n        }\r\n\r\n        if (canRemove) {\r\n            BackendService.deleteUsers(selectedUsers)\r\n                .then(() => refreshUsers())\r\n                .catch(() => {\r\n                })\r\n        }\r\n    }\r\n\r\n    const closeAlert = () => {\r\n        setShowAlert(false)\r\n    }\r\n\r\n    // const addUserClicked = () => {\r\n    //     navigate(`/users/-1`)\r\n    // }\r\n\r\n    if (hidden) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <div className=\"m-4\">\r\n            <div className=\"row my-2\">\r\n                <h3>Пользователи</h3>\r\n                <div className=\"btn-toolbar\">\r\n                    <div className=\"btn-group ms-auto\">\r\n                        {/*<button className=\"btn btn-outline-secondary\"*/}\r\n                        {/*        onClick={addUserClicked}>*/}\r\n                        {/*    <FontAwesomeIcon icon={faPlus}/>{' '}Добавить*/}\r\n                        {/*</button>*/}\r\n                    </div>\r\n                    <div className=\"btn-group ms-2\">\r\n                        <button className=\"btn btn-outline-secondary\"\r\n                                onClick={deleteUsersClicked}>\r\n                            <FontAwesomeIcon icon={faTrash}/>{' '}Удалить\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"row my-2 me-0\">\r\n                <PaginationComponent\r\n                    totalRecords={totalCount}\r\n                    pageLimit={limit}\r\n                    pageNeighbours={1}\r\n                    onPageChanged={onPageChanged}/>\r\n                <table className=\"table table-sm\">\r\n                    <thead className=\"thead-light\">\r\n                    <tr>\r\n                        <th>Логин</th>\r\n                        <th>Электронная почта</th>\r\n                        <th>\r\n                            <div className=\"btn-toolbar pb-1\">\r\n                                <div className=\"btn-group ms-auto\">\r\n                                    <input type=\"checkbox\" onChange={handleGroupCheckChange}/>\r\n                                </div>\r\n                            </div>\r\n                        </th>\r\n                    </tr>\r\n                    </thead>\r\n\r\n                    <tbody> {\r\n                        users && users.map((user, index) =>\r\n                            <tr key={user.id}>\r\n                                <td>{user.login}</td>\r\n                                <td>{user.email}</td>\r\n                                <td>\r\n                                    <div className=\"btn-toolbar\">\r\n                                        <div className=\"btn-group ms-auto\">\r\n                                            {/*<button className=\"btn btn-outline-secondary btn-sm btn-toolbar\"*/}\r\n                                            {/*        onClick={() =>*/}\r\n                                            {/*            updateUserClicked(user.id)} disabled={}>*/}\r\n                                            {/*    <FontAwesomeIcon icon={faEdit} fixedWidth/>*/}\r\n                                            {/*</button>*/}\r\n                                        </div>\r\n\r\n                                        <div className=\"btn-group ms-2 mt-1\">\r\n                                            <input type=\"checkbox\" name={index}\r\n                                                   checked={checkedItems.length > index ? checkedItems[index] : false}\r\n                                                   onChange={handleCheckChange}/>\r\n                                        </div>\r\n                                    </div>\r\n                                </td>\r\n                            </tr>\r\n                        )\r\n                    }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n\r\n            <Alert title=\"Удаление\"\r\n                   message={message}\r\n                   ok={onDelete}\r\n                   close={closeAlert}\r\n                   modal={show_alert}\r\n                   cancelButton={true}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserListComponent;",{"ruleId":"164","severity":1,"message":"165","line":2,"column":8,"nodeType":"166","messageId":"167","endLine":2,"endColumn":16},{"ruleId":"164","severity":1,"message":"168","line":4,"column":10,"nodeType":"166","messageId":"167","endLine":4,"endColumn":16},{"ruleId":"164","severity":1,"message":"169","line":35,"column":13,"nodeType":"166","messageId":"167","endLine":35,"endColumn":18},{"ruleId":"170","severity":1,"message":"171","line":5,"column":5,"nodeType":"172","messageId":"173","endLine":7,"endColumn":6},{"ruleId":"164","severity":1,"message":"174","line":3,"column":8,"nodeType":"166","messageId":"167","endLine":3,"endColumn":13},{"ruleId":"164","severity":1,"message":"175","line":13,"column":16,"nodeType":"166","messageId":"167","endLine":13,"endColumn":21},{"ruleId":"176","severity":1,"message":"177","line":33,"column":8,"nodeType":"178","endLine":33,"endColumn":10,"suggestions":"179"},{"ruleId":"164","severity":1,"message":"180","line":19,"column":12,"nodeType":"166","messageId":"167","endLine":19,"endColumn":16},{"ruleId":"176","severity":1,"message":"181","line":86,"column":8,"nodeType":"178","endLine":86,"endColumn":10,"suggestions":"182"},{"ruleId":"164","severity":1,"message":"175","line":12,"column":16,"nodeType":"166","messageId":"167","endLine":12,"endColumn":21},{"ruleId":"176","severity":1,"message":"177","line":25,"column":8,"nodeType":"178","endLine":25,"endColumn":10,"suggestions":"183"},{"ruleId":"164","severity":1,"message":"180","line":19,"column":12,"nodeType":"166","messageId":"167","endLine":19,"endColumn":16},{"ruleId":"176","severity":1,"message":"184","line":84,"column":8,"nodeType":"178","endLine":84,"endColumn":10,"suggestions":"185"},{"ruleId":"164","severity":1,"message":"175","line":14,"column":16,"nodeType":"166","messageId":"167","endLine":14,"endColumn":21},{"ruleId":"176","severity":1,"message":"177","line":30,"column":8,"nodeType":"178","endLine":30,"endColumn":10,"suggestions":"186"},{"ruleId":"164","severity":1,"message":"180","line":19,"column":12,"nodeType":"166","messageId":"167","endLine":19,"endColumn":16},{"ruleId":"176","severity":1,"message":"187","line":84,"column":8,"nodeType":"178","endLine":84,"endColumn":10,"suggestions":"188"},{"ruleId":"164","severity":1,"message":"189","line":3,"column":9,"nodeType":"166","messageId":"167","endLine":3,"endColumn":24},{"ruleId":"164","severity":1,"message":"190","line":4,"column":9,"nodeType":"166","messageId":"167","endLine":4,"endColumn":22},{"ruleId":"176","severity":1,"message":"191","line":45,"column":8,"nodeType":"178","endLine":45,"endColumn":10,"suggestions":"192"},{"ruleId":"176","severity":1,"message":"193","line":63,"column":8,"nodeType":"178","endLine":63,"endColumn":10,"suggestions":"194"},{"ruleId":"164","severity":1,"message":"175","line":14,"column":16,"nodeType":"166","messageId":"167","endLine":14,"endColumn":21},{"ruleId":"176","severity":1,"message":"177","line":36,"column":8,"nodeType":"178","endLine":36,"endColumn":10,"suggestions":"195"},{"ruleId":"164","severity":1,"message":"180","line":19,"column":12,"nodeType":"166","messageId":"167","endLine":19,"endColumn":16},{"ruleId":"176","severity":1,"message":"196","line":86,"column":8,"nodeType":"178","endLine":86,"endColumn":10,"suggestions":"197"},{"ruleId":"164","severity":1,"message":"175","line":14,"column":16,"nodeType":"166","messageId":"167","endLine":14,"endColumn":21},{"ruleId":"176","severity":1,"message":"177","line":30,"column":8,"nodeType":"178","endLine":30,"endColumn":10,"suggestions":"198"},{"ruleId":"164","severity":1,"message":"199","line":3,"column":18,"nodeType":"166","messageId":"167","endLine":3,"endColumn":24},{"ruleId":"164","severity":1,"message":"200","line":3,"column":26,"nodeType":"166","messageId":"167","endLine":3,"endColumn":32},{"ruleId":"164","severity":1,"message":"201","line":8,"column":9,"nodeType":"166","messageId":"167","endLine":8,"endColumn":21},{"ruleId":"164","severity":1,"message":"202","line":17,"column":11,"nodeType":"166","messageId":"167","endLine":17,"endColumn":19},{"ruleId":"164","severity":1,"message":"180","line":20,"column":12,"nodeType":"166","messageId":"167","endLine":20,"endColumn":16},{"ruleId":"176","severity":1,"message":"203","line":85,"column":8,"nodeType":"178","endLine":85,"endColumn":10,"suggestions":"204"},{"ruleId":"164","severity":1,"message":"205","line":99,"column":17,"nodeType":"166","messageId":"167","endLine":99,"endColumn":21},"no-unused-vars","'ReactDOM' is defined but never used.","Identifier","unusedVar","'faHome' is defined but never used.","'uname' is assigned a value but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'Utils' is defined but never used.","'setId' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["206"],"'page' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'refreshArtists'. Either include it or remove the dependency array.",["207"],["208"],"React Hook useEffect has a missing dependency: 'refreshCountries'. Either include it or remove the dependency array.",["209"],["210"],"React Hook useEffect has a missing dependency: 'refreshMuseums'. Either include it or remove the dependency array.",["211"],"'FontAwesomeIcon' is defined but never used.","'faChevronLeft' is defined but never used.","React Hook useEffect has missing dependencies: 'mySetValue' and 'uid'. Either include them or remove the dependency array.",["212"],"React Hook useEffect has a missing dependency: 'gotoPage'. Either include it or remove the dependency array.",["213"],["214"],"React Hook useEffect has a missing dependency: 'refreshPaintings'. Either include it or remove the dependency array.",["215"],["216"],"'faEdit' is defined but never used.","'faPlus' is defined but never used.","'alertActions' is defined but never used.","'navigate' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'refreshUsers'. Either include it or remove the dependency array.",["217"],"'user' is assigned a value but never used.",{"desc":"218","fix":"219"},{"desc":"220","fix":"221"},{"desc":"218","fix":"222"},{"desc":"223","fix":"224"},{"desc":"218","fix":"225"},{"desc":"226","fix":"227"},{"desc":"228","fix":"229"},{"desc":"230","fix":"231"},{"desc":"218","fix":"232"},{"desc":"233","fix":"234"},{"desc":"218","fix":"235"},{"desc":"236","fix":"237"},"Update the dependencies array to be: [id]",{"range":"238","text":"239"},"Update the dependencies array to be: [refreshArtists]",{"range":"240","text":"241"},{"range":"242","text":"239"},"Update the dependencies array to be: [refreshCountries]",{"range":"243","text":"244"},{"range":"245","text":"239"},"Update the dependencies array to be: [refreshMuseums]",{"range":"246","text":"247"},"Update the dependencies array to be: [mySetValue, uid]",{"range":"248","text":"249"},"Update the dependencies array to be: [gotoPage]",{"range":"250","text":"251"},{"range":"252","text":"239"},"Update the dependencies array to be: [refreshPaintings]",{"range":"253","text":"254"},{"range":"255","text":"239"},"Update the dependencies array to be: [refreshUsers]",{"range":"256","text":"257"},[1259,1261],"[id]",[2684,2686],"[refreshArtists]",[949,951],[2695,2697],"[refreshCountries]",[1133,1135],[2645,2647],"[refreshMuseums]",[1460,1462],"[mySetValue, uid]",[2112,2114],"[gotoPage]",[1424,1426],[2704,2706],"[refreshPaintings]",[1121,1123],[2676,2678],"[refreshUsers]"]